// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// dinvgamma1_Rcpp
double dinvgamma1_Rcpp(const double x, const double a, const double b);
RcppExport SEXP BayesFactor_dinvgamma1_Rcpp(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double >::type x(xSEXP );
        Rcpp::traits::input_parameter< const double >::type a(aSEXP );
        Rcpp::traits::input_parameter< const double >::type b(bSEXP );
        double __result = dinvgamma1_Rcpp(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ddinvgamma1_Rcpp
double ddinvgamma1_Rcpp(const double x, const double a, const double b);
RcppExport SEXP BayesFactor_ddinvgamma1_Rcpp(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double >::type x(xSEXP );
        Rcpp::traits::input_parameter< const double >::type a(aSEXP );
        Rcpp::traits::input_parameter< const double >::type b(bSEXP );
        double __result = ddinvgamma1_Rcpp(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// d2dinvgamma1_Rcpp
double d2dinvgamma1_Rcpp(const double x, const double a, const double b);
RcppExport SEXP BayesFactor_d2dinvgamma1_Rcpp(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double >::type x(xSEXP );
        Rcpp::traits::input_parameter< const double >::type a(aSEXP );
        Rcpp::traits::input_parameter< const double >::type b(bSEXP );
        double __result = d2dinvgamma1_Rcpp(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// jzs_sampler
NumericVector jzs_sampler(const int iterations, const NumericVector y, const NumericMatrix X, const NumericVector rscale, const IntegerVector gMap, const int incCont, const NumericVector importanceMu, const NumericVector importanceSig, const int progress, const Function callback, const double callbackInterval, const int which);
RcppExport SEXP BayesFactor_jzs_sampler(SEXP iterationsSEXP, SEXP ySEXP, SEXP XSEXP, SEXP rscaleSEXP, SEXP gMapSEXP, SEXP incContSEXP, SEXP importanceMuSEXP, SEXP importanceSigSEXP, SEXP progressSEXP, SEXP callbackSEXP, SEXP callbackIntervalSEXP, SEXP whichSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const int >::type iterations(iterationsSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type rscale(rscaleSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type gMap(gMapSEXP );
        Rcpp::traits::input_parameter< const int >::type incCont(incContSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type importanceMu(importanceMuSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type importanceSig(importanceSigSEXP );
        Rcpp::traits::input_parameter< const int >::type progress(progressSEXP );
        Rcpp::traits::input_parameter< const Function >::type callback(callbackSEXP );
        Rcpp::traits::input_parameter< const double >::type callbackInterval(callbackIntervalSEXP );
        Rcpp::traits::input_parameter< const int >::type which(whichSEXP );
        NumericVector __result = jzs_sampler(iterations, y, X, rscale, gMap, incCont, importanceMu, importanceSig, progress, callback, callbackInterval, which);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// jzs_log_marginal_posterior_logg
Rcpp::List jzs_log_marginal_posterior_logg(const NumericVector q, const double sumSq, const int N, const NumericMatrix XtCnX0, const NumericMatrix CnytCnX0, const NumericVector rscale, const IntegerVector gMap, const NumericVector gMapCounts, const NumericMatrix priorX, const int incCont, const bool limit, const NumericVector limits, const int which);
RcppExport SEXP BayesFactor_jzs_log_marginal_posterior_logg(SEXP qSEXP, SEXP sumSqSEXP, SEXP NSEXP, SEXP XtCnX0SEXP, SEXP CnytCnX0SEXP, SEXP rscaleSEXP, SEXP gMapSEXP, SEXP gMapCountsSEXP, SEXP priorXSEXP, SEXP incContSEXP, SEXP limitSEXP, SEXP limitsSEXP, SEXP whichSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector >::type q(qSEXP );
        Rcpp::traits::input_parameter< const double >::type sumSq(sumSqSEXP );
        Rcpp::traits::input_parameter< const int >::type N(NSEXP );
        Rcpp::traits::input_parameter< const NumericMatrix >::type XtCnX0(XtCnX0SEXP );
        Rcpp::traits::input_parameter< const NumericMatrix >::type CnytCnX0(CnytCnX0SEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type rscale(rscaleSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type gMap(gMapSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type gMapCounts(gMapCountsSEXP );
        Rcpp::traits::input_parameter< const NumericMatrix >::type priorX(priorXSEXP );
        Rcpp::traits::input_parameter< const int >::type incCont(incContSEXP );
        Rcpp::traits::input_parameter< const bool >::type limit(limitSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type limits(limitsSEXP );
        Rcpp::traits::input_parameter< const int >::type which(whichSEXP );
        Rcpp::List __result = jzs_log_marginal_posterior_logg(q, sumSq, N, XtCnX0, CnytCnX0, rscale, gMap, gMapCounts, priorX, incCont, limit, limits, which);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// jzs_Gibbs
NumericMatrix jzs_Gibbs(const int iterations, const NumericVector y, const NumericMatrix X, const NumericVector rscale, const double sig2start, const IntegerVector gMap, const NumericVector gMapCounts, const int incCont, bool nullModel, const IntegerVector ignoreCols, const int thin, const int progress, const Function callback, const double callbackInterval);
RcppExport SEXP BayesFactor_jzs_Gibbs(SEXP iterationsSEXP, SEXP ySEXP, SEXP XSEXP, SEXP rscaleSEXP, SEXP sig2startSEXP, SEXP gMapSEXP, SEXP gMapCountsSEXP, SEXP incContSEXP, SEXP nullModelSEXP, SEXP ignoreColsSEXP, SEXP thinSEXP, SEXP progressSEXP, SEXP callbackSEXP, SEXP callbackIntervalSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const int >::type iterations(iterationsSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type rscale(rscaleSEXP );
        Rcpp::traits::input_parameter< const double >::type sig2start(sig2startSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type gMap(gMapSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type gMapCounts(gMapCountsSEXP );
        Rcpp::traits::input_parameter< const int >::type incCont(incContSEXP );
        Rcpp::traits::input_parameter< bool >::type nullModel(nullModelSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type ignoreCols(ignoreColsSEXP );
        Rcpp::traits::input_parameter< const int >::type thin(thinSEXP );
        Rcpp::traits::input_parameter< const int >::type progress(progressSEXP );
        Rcpp::traits::input_parameter< const Function >::type callback(callbackSEXP );
        Rcpp::traits::input_parameter< const double >::type callbackInterval(callbackIntervalSEXP );
        NumericMatrix __result = jzs_Gibbs(iterations, y, X, rscale, sig2start, gMap, gMapCounts, incCont, nullModel, ignoreCols, thin, progress, callback, callbackInterval);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// GibbsLinearRegRcpp
NumericMatrix GibbsLinearRegRcpp(const int iterations, const NumericVector y, const NumericMatrix X, const double r, const double sig2start, const bool nullModel, const int progress, const Function callback, const double callbackInterval);
RcppExport SEXP BayesFactor_GibbsLinearRegRcpp(SEXP iterationsSEXP, SEXP ySEXP, SEXP XSEXP, SEXP rSEXP, SEXP sig2startSEXP, SEXP nullModelSEXP, SEXP progressSEXP, SEXP callbackSEXP, SEXP callbackIntervalSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const int >::type iterations(iterationsSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< const double >::type r(rSEXP );
        Rcpp::traits::input_parameter< const double >::type sig2start(sig2startSEXP );
        Rcpp::traits::input_parameter< const bool >::type nullModel(nullModelSEXP );
        Rcpp::traits::input_parameter< const int >::type progress(progressSEXP );
        Rcpp::traits::input_parameter< const Function >::type callback(callbackSEXP );
        Rcpp::traits::input_parameter< const double >::type callbackInterval(callbackIntervalSEXP );
        NumericMatrix __result = GibbsLinearRegRcpp(iterations, y, X, r, sig2start, nullModel, progress, callback, callbackInterval);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// log_determinant_pos_def
double log_determinant_pos_def(Eigen::MatrixXd A);
RcppExport SEXP BayesFactor_log_determinant_pos_def(SEXP ASEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP );
        double __result = log_determinant_pos_def(A);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// logSummaryStats
List logSummaryStats(NumericVector x);
RcppExport SEXP BayesFactor_logSummaryStats(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        List __result = logSummaryStats(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// log1pExp
double log1pExp(double x);
RcppExport SEXP BayesFactor_log1pExp(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        double __result = log1pExp(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// logExpXplusExpY
double logExpXplusExpY(const double x, const double y);
RcppExport SEXP BayesFactor_logExpXplusExpY(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double >::type x(xSEXP );
        Rcpp::traits::input_parameter< const double >::type y(ySEXP );
        double __result = logExpXplusExpY(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// logExpXminusExpY
double logExpXminusExpY(const double x, const double y);
RcppExport SEXP BayesFactor_logExpXminusExpY(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double >::type x(xSEXP );
        Rcpp::traits::input_parameter< const double >::type y(ySEXP );
        double __result = logExpXminusExpY(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// metropMetaTRcpp
NumericMatrix metropMetaTRcpp(NumericVector t, NumericVector n1, NumericVector n2, bool twoSample, double rscale, int iterations, bool doInterval, NumericVector interval, bool intervalCompl, bool nullModel, int progress, Function callback, double callbackInterval);
RcppExport SEXP BayesFactor_metropMetaTRcpp(SEXP tSEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP twoSampleSEXP, SEXP rscaleSEXP, SEXP iterationsSEXP, SEXP doIntervalSEXP, SEXP intervalSEXP, SEXP intervalComplSEXP, SEXP nullModelSEXP, SEXP progressSEXP, SEXP callbackSEXP, SEXP callbackIntervalSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type n1(n1SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type n2(n2SEXP );
        Rcpp::traits::input_parameter< bool >::type twoSample(twoSampleSEXP );
        Rcpp::traits::input_parameter< double >::type rscale(rscaleSEXP );
        Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP );
        Rcpp::traits::input_parameter< bool >::type doInterval(doIntervalSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type interval(intervalSEXP );
        Rcpp::traits::input_parameter< bool >::type intervalCompl(intervalComplSEXP );
        Rcpp::traits::input_parameter< bool >::type nullModel(nullModelSEXP );
        Rcpp::traits::input_parameter< int >::type progress(progressSEXP );
        Rcpp::traits::input_parameter< Function >::type callback(callbackSEXP );
        Rcpp::traits::input_parameter< double >::type callbackInterval(callbackIntervalSEXP );
        NumericMatrix __result = metropMetaTRcpp(t, n1, n2, twoSample, rscale, iterations, doInterval, interval, intervalCompl, nullModel, progress, callback, callbackInterval);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// metropProportionRcpp
NumericMatrix metropProportionRcpp(NumericVector y, NumericVector n, double p0, double rscale, int iterations, bool doInterval, NumericVector interval, bool intervalCompl, bool nullModel, int progress, Function callback, double callbackInterval);
RcppExport SEXP BayesFactor_metropProportionRcpp(SEXP ySEXP, SEXP nSEXP, SEXP p0SEXP, SEXP rscaleSEXP, SEXP iterationsSEXP, SEXP doIntervalSEXP, SEXP intervalSEXP, SEXP intervalComplSEXP, SEXP nullModelSEXP, SEXP progressSEXP, SEXP callbackSEXP, SEXP callbackIntervalSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP );
        Rcpp::traits::input_parameter< double >::type p0(p0SEXP );
        Rcpp::traits::input_parameter< double >::type rscale(rscaleSEXP );
        Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP );
        Rcpp::traits::input_parameter< bool >::type doInterval(doIntervalSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type interval(intervalSEXP );
        Rcpp::traits::input_parameter< bool >::type intervalCompl(intervalComplSEXP );
        Rcpp::traits::input_parameter< bool >::type nullModel(nullModelSEXP );
        Rcpp::traits::input_parameter< int >::type progress(progressSEXP );
        Rcpp::traits::input_parameter< Function >::type callback(callbackSEXP );
        Rcpp::traits::input_parameter< double >::type callbackInterval(callbackIntervalSEXP );
        NumericMatrix __result = metropProportionRcpp(y, n, p0, rscale, iterations, doInterval, interval, intervalCompl, nullModel, progress, callback, callbackInterval);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gibbsTwoSampleRcpp
NumericMatrix gibbsTwoSampleRcpp(NumericVector ybar, NumericVector s2, NumericVector N, double rscale, int iterations, bool doInterval, NumericVector interval, bool intervalCompl, bool nullModel, int progress, Function callback, double callbackInterval);
RcppExport SEXP BayesFactor_gibbsTwoSampleRcpp(SEXP ybarSEXP, SEXP s2SEXP, SEXP NSEXP, SEXP rscaleSEXP, SEXP iterationsSEXP, SEXP doIntervalSEXP, SEXP intervalSEXP, SEXP intervalComplSEXP, SEXP nullModelSEXP, SEXP progressSEXP, SEXP callbackSEXP, SEXP callbackIntervalSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type ybar(ybarSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type s2(s2SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP );
        Rcpp::traits::input_parameter< double >::type rscale(rscaleSEXP );
        Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP );
        Rcpp::traits::input_parameter< bool >::type doInterval(doIntervalSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type interval(intervalSEXP );
        Rcpp::traits::input_parameter< bool >::type intervalCompl(intervalComplSEXP );
        Rcpp::traits::input_parameter< bool >::type nullModel(nullModelSEXP );
        Rcpp::traits::input_parameter< int >::type progress(progressSEXP );
        Rcpp::traits::input_parameter< Function >::type callback(callbackSEXP );
        Rcpp::traits::input_parameter< double >::type callbackInterval(callbackIntervalSEXP );
        NumericMatrix __result = gibbsTwoSampleRcpp(ybar, s2, N, rscale, iterations, doInterval, interval, intervalCompl, nullModel, progress, callback, callbackInterval);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gibbsOneSampleRcpp
NumericMatrix gibbsOneSampleRcpp(double ybar, double s2, int N, double rscale, int iterations, bool doInterval, NumericVector interval, bool intervalCompl, bool nullModel, int progress, Function callback, double callbackInterval);
RcppExport SEXP BayesFactor_gibbsOneSampleRcpp(SEXP ybarSEXP, SEXP s2SEXP, SEXP NSEXP, SEXP rscaleSEXP, SEXP iterationsSEXP, SEXP doIntervalSEXP, SEXP intervalSEXP, SEXP intervalComplSEXP, SEXP nullModelSEXP, SEXP progressSEXP, SEXP callbackSEXP, SEXP callbackIntervalSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type ybar(ybarSEXP );
        Rcpp::traits::input_parameter< double >::type s2(s2SEXP );
        Rcpp::traits::input_parameter< int >::type N(NSEXP );
        Rcpp::traits::input_parameter< double >::type rscale(rscaleSEXP );
        Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP );
        Rcpp::traits::input_parameter< bool >::type doInterval(doIntervalSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type interval(intervalSEXP );
        Rcpp::traits::input_parameter< bool >::type intervalCompl(intervalComplSEXP );
        Rcpp::traits::input_parameter< bool >::type nullModel(nullModelSEXP );
        Rcpp::traits::input_parameter< int >::type progress(progressSEXP );
        Rcpp::traits::input_parameter< Function >::type callback(callbackSEXP );
        Rcpp::traits::input_parameter< double >::type callbackInterval(callbackIntervalSEXP );
        NumericMatrix __result = gibbsOneSampleRcpp(ybar, s2, N, rscale, iterations, doInterval, interval, intervalCompl, nullModel, progress, callback, callbackInterval);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
